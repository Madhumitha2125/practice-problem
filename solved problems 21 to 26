Q21. Sum of Digits (Easy)
Find the sum of digits of a number.
Input format :
An integer.
Output format :
Sum of digits.
Sample test cases :
Input :
123
Output :
6
Input :
405
Output :
9
import java.util.Scanner;

public class SumOfDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
         System.out.println("enter a number:");

        // Input: an integer
        int number = scanner.nextInt();
        int sum = 0;

        // Process: extract digits and add them
        while (number > 0) {
            sum += number % 10;  // get last digit
            number /= 10;        // remove last digit
        }

        // Output: sum of digits
        System.out.println(sum);

        scanner.close();
    }
}
**********************************************************************************

Q22. Harshad Number (Medium)
Check whether the given number is a Harshad Number.
(A Harshad Number is divisible by the sum of its digits.)
Input format :
An integer.
Output format :
Harshad / Not Harshad.
Sample test cases :
Input :
18
Output :
Harshad Number
Input :
21
Output :
Not /*
***********************************************************************
Q22. Harshad Number (Medium)
Check whether the given number is a Harshad Number.
(A Harshad Number is divisible by the sum of its digits.)
Input format :
An integer.
Output format :
Harshad / Not Harshad.
Sample test cases :
Input :
18
Output :
Harshad Number
Input :
21
Output :
Not Harshad Number 
*/
package week1;
import java.util.Scanner;
public class HarshadNumber {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n=sc.nextInt(), sum=0, digit, temp = n;
		while(n>0) {
			digit = n %10;
			sum += digit;
			n /= 10;
		}
	}
/*
**************************************************************************

Q23. Perfect Number (Medium)
Check whether a number is a Perfect Number.
(A Perfect Number is equal to the sum of its proper divisors.)
Input format :
An integer.
Output format :
Perfect / Not Perfect.
Sample test cases :
Input :
28
Output :
Perfect Number
Input :
12
Output :
Not Perfect Number
import java.util.Scanner;

public class PerfectNumberCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input: an integer
        int number = scanner.nextInt();
        int sum = 0;

        // Find proper divisors and calculate their sum
        for (int i = 1; i < number; i++) {
            if (number % i == 0) {
                sum += i;
            }
        }

        // Output: check if it's a perfect number
        if (sum == number) {
            System.out.println("Perfect Number");
        } else {
            System.out.println("Not Perfect Number");
        }

        scanner.close();
    }
}
********************************************************************************
Q24. Prime Number (Easy)
Check whether a number is Prime.
Input format :
An integer.
Output format :
Prime / Not Prime.
Sample test cases :
Input :
7
Output :
Prime
Input :
10
Output :
Not Prime
*/
package week1;
import java.util.Scanner;
public class PrimeNumber {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n=sc.nextInt();
		boolean val = true;
		for(int i=2; i< Math.sqrt(n); i++) {
			if(n % i == 0) {
				val = false;
				break;
			}
			else val = true;
		}
		if(val) System.out.println("Prime");
		else System.out.println("Not Prime");
		sc.close();
	}
}
/*
**********************************************************************

Q25. Perfect Square (Easy)
Check whether a number is a Perfect Square.
Input format :
An integer.
Output format :
Perfect Square / Not Perfect Square.
Sample test cases :
Input :
25
Output :
Perfect Square
Input :
20
Output :
Not Perfect Square 
*/
package week1;
import java.util.Scanner;
public class PerfectSquare {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n=sc.nextInt();
		boolean val =false;
		for(int i=1; i<=n/2; i++) {
			if(i*i == n) {
				val = true;
				break;
			} else val = false;
		}
		if(val) System.out.println("Perfect Square");
		else System.out.println("Not Perfect Square");
		sc.close();
	}
}
*******************************************************************************
Q26. Fibonacci Series (Easy)
Print Fibonacci Series up to N terms.
Input format :
An integer N.
Output format :
First N terms of Fibonacci series.
Sample test cases :
Input :
5
Output :
0 1 1 2 3
*/
package week1;
import java.util.Scanner;
public class FibonacciSeries {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int pre1=1, pre2=0, curr, n = sc.nextInt();
		int arr[] = new int[n];
		if(n==1) {
			arr[0]=0;
		}
		else if(n==2) {
			arr[0] =0;
			arr[1] = 1;
		}
		else if(n >2) {
			arr[0] =0;
			arr[1] = 1;
			for(int i=2; i<n; i++) {
				curr = pre1 + pre2;
				arr[i] = curr;
				pre1 = curr;
				pre2 = pre1;
			}
		}
		for(int i=0; i<n; i++) {
			System.out.print(arr[i] + " ");
		}
		sc.close();
	}
}
